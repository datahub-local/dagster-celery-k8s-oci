name: Build and Tag Docker Image

on:
  push:
    branches: [main]
    paths:
      - "uv.lock"
      - "pyproject.toml"
      - "Dockerfile"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Clean up old package versions
        uses: actions/delete-package-versions@v5
        with: 
          package-name: '${{ github.repository }}'
          package-type: 'container'
          min-versions-to-keep: 5

      - name: Extract dagster version from pyproject.toml
        id: versionSelector
        run: |
          TAG_VERSION=$(sed -n -E 's/version = "([0-9.]+)"/\1/p' pyproject.toml)
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_ENV

          if [[ ! -z "$(docker images -q ghcr.io/${{ github.repository }}:$TAG_VERSION)" ]]; then
            echo "Skipping version $TAG_VERSION: it already exists."
            echo "skipBuild=TRUE" >> $GITHUB_OUTPUT
          fi

          echo "skipBuild=FALSE" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          pull: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ env.TAG_VERSION }}
          build-args: |
            TAG_VERSION=${{ env.TAG_VERSION }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
        if: ${{ needs.versionSelector.outputs.skipBuild != 'TRUE' }}
